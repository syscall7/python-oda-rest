from oda_rest.api import Section
from test.test_case import MkdirTestCase

class TestSections(MkdirTestCase):

    def test_sections(self):
        expected = (
            Section(name='.interp', vma=4194872, size=28, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'READONLY', 'desc': 'A signal to the OS that the section contains read only data.', 'name': 'SEC_READONLY'}, {'abbrev': 'DATA', 'desc': 'The section contains data only.', 'name': 'SEC_DATA'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.note.ABI-tag', vma=4194900, size=32, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'READONLY', 'desc': 'A signal to the OS that the section contains read only data.', 'name': 'SEC_READONLY'}, {'abbrev': 'DATA', 'desc': 'The section contains data only.', 'name': 'SEC_DATA'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.note.gnu.build-id', vma=4194932, size=36, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'READONLY', 'desc': 'A signal to the OS that the section contains read only data.', 'name': 'SEC_READONLY'}, {'abbrev': 'DATA', 'desc': 'The section contains data only.', 'name': 'SEC_DATA'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.gnu.hash', vma=4194968, size=68, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'READONLY', 'desc': 'A signal to the OS that the section contains read only data.', 'name': 'SEC_READONLY'}, {'abbrev': 'DATA', 'desc': 'The section contains data only.', 'name': 'SEC_DATA'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.dynsym', vma=4195040, size=1848, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'READONLY', 'desc': 'A signal to the OS that the section contains read only data.', 'name': 'SEC_READONLY'}, {'abbrev': 'DATA', 'desc': 'The section contains data only.', 'name': 'SEC_DATA'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.dynstr', vma=4196888, size=730, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'READONLY', 'desc': 'A signal to the OS that the section contains read only data.', 'name': 'SEC_READONLY'}, {'abbrev': 'DATA', 'desc': 'The section contains data only.', 'name': 'SEC_DATA'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.gnu.version', vma=4197618, size=154, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'READONLY', 'desc': 'A signal to the OS that the section contains read only data.', 'name': 'SEC_READONLY'}, {'abbrev': 'DATA', 'desc': 'The section contains data only.', 'name': 'SEC_DATA'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.gnu.version_r', vma=4197776, size=80, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'READONLY', 'desc': 'A signal to the OS that the section contains read only data.', 'name': 'SEC_READONLY'}, {'abbrev': 'DATA', 'desc': 'The section contains data only.', 'name': 'SEC_DATA'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.rela.dyn', vma=4197856, size=168, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'READONLY', 'desc': 'A signal to the OS that the section contains read only data.', 'name': 'SEC_READONLY'}, {'abbrev': 'DATA', 'desc': 'The section contains data only.', 'name': 'SEC_DATA'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.rela.plt', vma=4198024, size=1608, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'READONLY', 'desc': 'A signal to the OS that the section contains read only data.', 'name': 'SEC_READONLY'}, {'abbrev': 'DATA', 'desc': 'The section contains data only.', 'name': 'SEC_DATA'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.init', vma=4199632, size=24, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'READONLY', 'desc': 'A signal to the OS that the section contains read only data.', 'name': 'SEC_READONLY'}, {'abbrev': 'CODE', 'desc': 'The section contains code only.', 'name': 'SEC_CODE'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.plt', vma=4199664, size=1088, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'READONLY', 'desc': 'A signal to the OS that the section contains read only data.', 'name': 'SEC_READONLY'}, {'abbrev': 'CODE', 'desc': 'The section contains code only.', 'name': 'SEC_CODE'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.text', vma=4200752, size=44392, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'READONLY', 'desc': 'A signal to the OS that the section contains read only data.', 'name': 'SEC_READONLY'}, {'abbrev': 'CODE', 'desc': 'The section contains code only.', 'name': 'SEC_CODE'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.fini', vma=4245144, size=14, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'READONLY', 'desc': 'A signal to the OS that the section contains read only data.', 'name': 'SEC_READONLY'}, {'abbrev': 'CODE', 'desc': 'The section contains code only.', 'name': 'SEC_CODE'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.rodata', vma=4245184, size=5664, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'READONLY', 'desc': 'A signal to the OS that the section contains read only data.', 'name': 'SEC_READONLY'}, {'abbrev': 'DATA', 'desc': 'The section contains data only.', 'name': 'SEC_DATA'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.eh_frame_hdr', vma=4250848, size=1156, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'READONLY', 'desc': 'A signal to the OS that the section contains read only data.', 'name': 'SEC_READONLY'}, {'abbrev': 'DATA', 'desc': 'The section contains data only.', 'name': 'SEC_DATA'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.eh_frame', vma=4252008, size=4708, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'READONLY', 'desc': 'A signal to the OS that the section contains read only data.', 'name': 'SEC_READONLY'}, {'abbrev': 'DATA', 'desc': 'The section contains data only.', 'name': 'SEC_DATA'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.ctors', vma=6356512, size=16, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'DATA', 'desc': 'The section contains data only.', 'name': 'SEC_DATA'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.dtors', vma=6356528, size=16, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'DATA', 'desc': 'The section contains data only.', 'name': 'SEC_DATA'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.jcr', vma=6356544, size=8, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'DATA', 'desc': 'The section contains data only.', 'name': 'SEC_DATA'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.dynamic', vma=6356552, size=400, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'DATA', 'desc': 'The section contains data only.', 'name': 'SEC_DATA'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.got', vma=6356952, size=16, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'DATA', 'desc': 'The section contains data only.', 'name': 'SEC_DATA'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.got.plt', vma=6356968, size=560, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'DATA', 'desc': 'The section contains data only.', 'name': 'SEC_DATA'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
            Section(name='.data', vma=6357536, size=152, flags=[{'abbrev': 'ALLOC', 'desc': 'Tells the OS to allocate space for this section when loading. This is clear for a section containing debug information only.', 'name': 'SEC_ALLOC'}, {'abbrev': 'LOAD', 'desc': 'Tells the OS to load the section from the file when loading. This is clear for a .bss section.', 'name': 'SEC_LOAD'}, {'abbrev': 'DATA', 'desc': 'The section contains data only.', 'name': 'SEC_DATA'}, {'abbrev': 'CONTENTS', 'desc': 'The section has contents - a data section could be <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be <<SEC_HAS_CONTENTS>>.', 'name': 'SEC_HAS_CONTENTS'}]),
        )

        actual = self.project.Sections()

        for e, a in zip(expected, actual):
            self.assertEqual(e, a)
